#!/bin/sh

# Copyright 2015 Antonio Malcolm, released under an MPL, v. 2.0, license. All rights reserved.
#
# This file is part of Corgi Scripts (also referred to as corgi-scripts).
#
# Corgi Scripts is subject to the terms of the Mozilla Public License, v. 2.0. 
# If a copy of the MPL was not distributed with this file, 
# you can obtain one at http://mozilla.org/MPL/2.0/.
#
# Corgi Scripts is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either expressed or implied.
# See LICENSE.txt, for the specific language governing rights and limitations under the License,
# which should have been provided with this software, or visit http://mozilla.org/MPL/2.0/.

# corgi-openbox-menus-displays.shlib - Functions used to generate Openbox menus and items for describing and managing X screens and display connections, 
#                                      using xrandr and lspci as backends.
#
# v2015.07.17
#
# Authored by Antonio Malcolm
#
# 
# Requires: corgi-openbox-menus-core.shlib
# Requires: corgi-displays-management.shlib
# Requires: corgi-posix-core.shlib (normally provided by corgi-openbox-menus-core.shlib or corgi-displays-management.shlib)
# Requires: xrandr - for reporting available display resolutions and making changes
# Requires: lspci - for obtaining device information


currentDirectory="`dirname "$0"`"
currentDirectory="`cd "$currentDirectory" ; pwd -P `"
parentDirectory="`dirname $currentDirectory`"

corgiObMenuLib="$parentDirectory/lib/corgi/openbox/corgi-openbox-menus-core.shlib"
corgiDisplaysManagementLib="$parentDirectory/lib/corgi/corgi-displays-management.shlib"

if [ ! -e "$corgiObMenuLib" ]
then
  logger "ERROR (corgi-openbox-menus-displays.shlib): $corgiObMenuLib is missing. Exiting..."
  echo "ERROR (corgi-openbox-menus-displays.shlib): $corgiObMenuLib is missing. Exiting..."
  exit 1
fi

if [ ! -e "$corgiDisplaysManagementLib" ]
then
  logger "ERROR (corgi-openbox-menus-displays.shlib): $corgiDisplaysManagementLib is missing. Exiting..."
  echo "ERROR (corgi-openbox-menus-displays.shlib): $corgiDisplaysManagementLib is missing. Exiting..."
  exit 1
fi

. "$corgiObMenuLib"
. "$corgiDisplaysManagementLib"

hasXrandr=false
hasLspci=false

if ! command -v xrandr > /dev/null
then
  logger "ERROR (corgi-openbox-menus-displays.shlib): xrandr not found. Please install xrandr"
else 
  hasXrandr=true
fi

if ! command -v lspci > /dev/null
then
  logger "ERROR (corgi-openbox-menus-displays.shlib): lspci not found. Please install lspci"
else 
  hasLspci=true
fi


connectionDataDelimiter=','


# Generates and echoes Openbox menus (as an XML-formatted string) which permits the manipulation of display brightness.
#
# $1 - string, required, the name of the interface which is used to set the display brightness
buildConnectionBrightnessMenu() {

  name="$1"
  interface="$2"
  
  setBrightnessCommand="sudo corgi-display-brightness-control \"up\" \"$interface\""
  setBrightnessItems="$setBrightnessItems`corgiObMenuItem "label:Higher" "action:Execute" "command:$setBrightnessCommand"`"
  
  setBrightnessCommand="sudo corgi-display-brightness-control \"down\" \"$interface\""
  setBrightnessItems="$setBrightnessItems`corgiObMenuItem "label:Lower" "action:Execute" "command:$setBrightnessCommand"`"
  
  setBrightnessCommand="sudo corgi-display-brightness-control \"percentage\" 10 \"$interface\""
  setBrightnessItems="$setBrightnessItems`corgiObMenuItem "label:10%" "action:Execute" "command:$setBrightnessCommand"`"
  
  setBrightnessCommand="sudo corgi-display-brightness-control \"percentage\" 20 \"$interface\""
  setBrightnessItems="$setBrightnessItems`corgiObMenuItem "label:20%" "action:Execute" "command:$setBrightnessCommand"`"
  
  setBrightnessCommand="sudo corgi-display-brightness-control \"percentage\" 30 \"$interface\""
  setBrightnessItems="$setBrightnessItems`corgiObMenuItem "label:30%" "action:Execute" "command:$setBrightnessCommand"`"
  
  setBrightnessCommand="sudo corgi-display-brightness-control \"percentage\" 40 \"$interface\""
  setBrightnessItems="$setBrightnessItems`corgiObMenuItem "label:40%" "action:Execute" "command:$setBrightnessCommand"`"
  
  setBrightnessCommand="sudo corgi-display-brightness-control \"percentage\" 50 \"$interface\""
  setBrightnessItems="$setBrightnessItems`corgiObMenuItem "label:50%" "action:Execute" "command:$setBrightnessCommand"`"
  
  setBrightnessCommand="sudo corgi-display-brightness-control \"percentage\" 60 \"$interface\""
  setBrightnessItems="$setBrightnessItems`corgiObMenuItem "label:60%" "action:Execute" "command:$setBrightnessCommand"`"
  
  setBrightnessCommand="sudo corgi-display-brightness-control \"percentage\" 70 \"$interface\""
  setBrightnessItems="$setBrightnessItems`corgiObMenuItem "label:70%" "action:Execute" "command:$setBrightnessCommand"`"
  
  setBrightnessCommand="sudo corgi-display-brightness-control \"percentage\" 80 \"$interface\""
  setBrightnessItems="$setBrightnessItems`corgiObMenuItem "label:80%" "action:Execute" "command:$setBrightnessCommand"`"
  
  setBrightnessCommand="sudo corgi-display-brightness-control \"percentage\" 90 \"$interface\""
  setBrightnessItems="$setBrightnessItems`corgiObMenuItem "label:90%" "action:Execute" "command:$setBrightnessCommand"`"
  
  setBrightnessCommand="sudo corgi-display-brightness-control \"percentage\" 100 \"$interface\""
  setBrightnessItems="$setBrightnessItems`corgiObMenuItem "label:100%" "action:Execute" "command:$setBrightnessCommand"`"
  
  menuId="`corgiMakeIdString "corgi-menus-displays-connections-$name-brightness-"`"
  echo "`corgiObMenu "id:$menuId" "label:Set Brightness" "content:$setBrightnessItems"`"
  
  exit $?

}


# Generates and echoes Openbox menus (as an XML-formatted string) which permit the manipulation of display positions.
#
# $1 - string, required, the name of the display being moved to another position
# $2 - string, required, the names of all displays present, positioned in relation to the display being moved
# $3 - string, optional, the name of the display designated as primary (if any) 
buildConnectionMoveMenus() {

  moveAboveItems=''
  moveBelowItems=''
  moveLeftItems=''
  moveRightItems=''
  moveMenus=''

  name="$1"
  names="$2"
  primaryName="$3"

  while corgiHasSubstring "$names" $connectionDataDelimiter
  do

    nextName="`corgiFetchSubstringBefore "$names" $connectionDataDelimiter 'first'`"   

    if [ "$nextName" != "$name" ]
    then  

      moveCommand="sh -c 'cd \"$currentDirectory\" ; . \"$parentDirectory/lib/corgi/openbox/menus/corgi-openbox-menus-displays.shlib\" ; moveDisplay \"$name\" \"y\" \"above\" \"$nextName\" \"$primaryName\"'"
      moveAboveItems="$moveAboveItems`corgiObMenuItem "label:$nextName" "action:Execute" "command:$moveCommand"`" 

      moveCommand="sh -c 'cd \"$currentDirectory\" ; . \"$parentDirectory/lib/corgi/openbox/menus/corgi-openbox-menus-displays.shlib\" ; moveDisplay \"$name\" \"y\" \"below\" \"$nextName\" \"$primaryName\"'"
      moveBelowItems="$moveBelowItems`corgiObMenuItem "label:$nextName" "action:Execute" "command:$moveCommand"`" 

      moveCommand="sh -c 'cd \"$currentDirectory\" ; . \"$parentDirectory/lib/corgi/openbox/menus/corgi-openbox-menus-displays.shlib\" ; moveDisplay \"$name\" \"x\" \"left\" \"$nextName\" \"$primaryName\"'"
      moveLeftItems="$moveLeftItems`corgiObMenuItem "label:$nextName" "action:Execute" "command:$moveCommand"`" 

      moveCommand="sh -c 'cd \"$currentDirectory\" ; . \"$parentDirectory/lib/corgi/openbox/menus/corgi-openbox-menus-displays.shlib\" ; moveDisplay \"$name\" \"x\" \"right\" \"$nextName\" \"$primaryName\"'"
      moveRightItems="$moveRightItems`corgiObMenuItem "label:$nextName" "action:Execute" "command:$moveCommand"`" 

    fi

    names="`corgiFetchSubstringAfter "$names" $connectionDataDelimiter 'first'`"

  done

  menuId="`corgiMakeIdString "corgi-menus-displays-connections-$name-move-above-"`"
  moveMenus="$moveMenus`corgiObMenu "id:$menuId" "label:Above" "content:$moveAboveItems"`"

  menuId="`corgiMakeIdString "corgi-menus-displays-connections-$name-move-below-"`"
  moveMenus="$moveMenus`corgiObMenu "id:$menuId" "label:Below" "content:$moveBelowItems"`"

  menuId="`corgiMakeIdString "corgi-menus-displays-connections-$name-move-left-"`"
  moveMenus="$moveMenus`corgiObMenu "id:$menuId" "label:Left Of" "content:$moveLeftItems"`"

  menuId="`corgiMakeIdString "corgi-menus-displays-connections-$name-move-right-"`"
  moveMenus="$moveMenus`corgiObMenu "id:$menuId" "label:Right Of" "content:$moveRightItems"`"

  echo "`corgiObPipeMenu "content:$moveMenus"`"
  
  exit $?

}


# Generates and echoes an Openbox menus (as an XML-formatted string) which permits the manipulation of display scale.
#
# $1 - string, required, the name of the display for which scale is being set
buildConnectionScaleMenu() {

  name="$1"
  
  setScaleCommand="sh -c 'cd \"$currentDirectory\" ; . \"$parentDirectory/lib/corgi/openbox/menus/corgi-openbox-menus-displays.shlib\" ; setDisplayScale \"$name\" 0.8'"
  scaleItems="`corgiObMenuItem "label:0.8" "action:Execute" "command:$setScaleCommand"`"   

  setScaleCommand="sh -c 'cd \"$currentDirectory\" ; . \"$parentDirectory/lib/corgi/openbox/menus/corgi-openbox-menus-displays.shlib\" ; setDisplayScale \"$name\" 0.9'"
  scaleItems="$scaleItems`corgiObMenuItem "label:0.9" "action:Execute" "command:$setScaleCommand"`"   

  setScaleCommand="sh -c 'cd \"$currentDirectory\" ; . \"$parentDirectory/lib/corgi/openbox/menus/corgi-openbox-menus-displays.shlib\" ; setDisplayScale \"$name\" 1.0'"
  scaleItems="$scaleItems`corgiObMenuItem "label:1.0" "action:Execute" "command:$setScaleCommand"`"

  setScaleCommand="sh -c 'cd \"$currentDirectory\" ; . \"$parentDirectory/lib/corgi/openbox/menus/corgi-openbox-menus-displays.shlib\" ; setDisplayScale \"$name\" 1.1'"
  scaleItems="$scaleItems`corgiObMenuItem "label:1.1" "action:Execute" "command:$setScaleCommand"`"

  setScaleCommand="sh -c 'cd \"$currentDirectory\" ; . \"$parentDirectory/lib/corgi/openbox/menus/corgi-openbox-menus-displays.shlib\" ; setDisplayScale \"$name\" 1.2'"
  scaleItems="$scaleItems`corgiObMenuItem "label:1.2" "action:Execute" "command:$setScaleCommand"`"

  setScaleCommand="sh -c 'cd \"$currentDirectory\" ; . \"$parentDirectory/lib/corgi/openbox/menus/corgi-openbox-menus-displays.shlib\" ; setDisplayScale \"$name\" 1.3'"
  scaleItems="$scaleItems`corgiObMenuItem "label:1.3" "action:Execute" "command:$setScaleCommand"`"

  setScaleCommand="sh -c 'cd \"$currentDirectory\" ; . \"$parentDirectory/lib/corgi/openbox/menus/corgi-openbox-menus-displays.shlib\" ; setDisplayScale \"$name\" 1.4'"
  scaleItems="$scaleItems`corgiObMenuItem "label:1.4" "action:Execute" "command:$setScaleCommand"`"

  setScaleCommand="sh -c 'cd \"$currentDirectory\" ; . \"$parentDirectory/lib/corgi/openbox/menus/corgi-openbox-menus-displays.shlib\" ; setDisplayScale \"$name\" 1.5'"
  scaleItems="$scaleItems`corgiObMenuItem "label:1.5" "action:Execute" "command:$setScaleCommand"`"

  setScaleCommand="sh -c 'cd \"$currentDirectory\" ; . \"$parentDirectory/lib/corgi/openbox/menus/corgi-openbox-menus-displays.shlib\" ; setDisplayScale \"$name\" 1.6'"
  scaleItems="$scaleItems`corgiObMenuItem "label:1.6" "action:Execute" "command:$setScaleCommand"`"

  setScaleCommand="sh -c 'cd \"$currentDirectory\" ; . \"$parentDirectory/lib/corgi/openbox/menus/corgi-openbox-menus-displays.shlib\" ; promptUserForDisplayScale \"$name\"'"
  scaleItems="$scaleItems`corgiObMenuItem "label:Arbitrary" "action:Execute" "command:$setScaleCommand"`"

  menuId="`corgiMakeIdString "corgi-menus-displays-connections-$name-scale-"`"
  echo "`corgiObMenu "id:$menuId" "label:Set Scale" "content:$scaleItems"`"
  
  exit $?

}


# Generates and echoes an Openbox menu (as an XML-formatted string) containing submenus and items which describe,
# as well as allow the manipulation of, an active display connection.
#
# $1 - string, required, the name of the display connection for which the menu is being generated
# $2 - string, required, the names of all display connections present
# $3 - string, required, the display resolutions available to the display connection
# $4 - string, required, details which describe the display connection
# $5 - string, required, the display resolutions available to the display connection, in "easy-reading" format
# $6 - string, optional, the name of the display connection designated as primary (if any) 
buildConnectionMenu() {

  detailsMenu=''
  supportedResMenu=''
  setPanningItem=''
  clearPanningItem=''
  makePrimaryItem=''
  moveMenu=''
  brightnessMenu=''

  name="$1"
  names="$2"
  supportedResolutions="$3" 
  detailLabels="$4"
  supportedResolutionLabels="$5"
  brightnessInterface="$6" 
  primaryName="$7"

  if [ ! -z "$names" ]
  then

    names="`corgiRemoveAllOccurrencesOfSubstring "$names" ' '`"
    hasPanning=false
    isPrimary=false

    if corgiHasSubstring "$name" '(primary)'
    then
      name="`corgiFetchSubstringBefore "$name" '(primary)'`"
      name="`corgiRemoveAllOccurrencesOfSubstring "$name" ' '`"
      isPrimary=true
    fi

    if [ ! -z "$detailLabels" ]          
    then

      while corgiHasSubstring "$detailLabels" $connectionDataDelimiter
      do

        detail="`corgiFetchSubstringBefore "$detailLabels" $connectionDataDelimiter 'first'`"

        if corgiHasSubstring "$detail" 'Panning'
        then

          panning="`corgiFetchSubstringAfter "$detail" 'Panning:'`"
          panning="`corgiTrimWhiteSpace "$panning"`"

          if [ "$panning" != '0' ]
          then
            hasPanning=true
          fi

        fi 

        detailsMenu="$detailsMenu`corgiObMenuItem "label:$detail"`"
        detailLabels="`corgiFetchSubstringAfter "$detailLabels" $connectionDataDelimiter 'first'`"

      done

      menuId="`corgiMakeIdString "corgi-menus-displays-connections-$name-details-"`"
      detailsMenu="`corgiObMenu "id:$menuId" "label:Details" "content:$detailsMenu"`"

    fi

    if [ ! -z "$supportedResolutions" ]          
    then

      while corgiHasSubstring "$supportedResolutionLabels" $connectionDataDelimiter
      do

        resolution="`corgiFetchSubstringBefore "$supportedResolutions" $connectionDataDelimiter 'first'`"
        resolutionLabel="`corgiFetchSubstringBefore "$supportedResolutionLabels" $connectionDataDelimiter 'first'`"

        setResolutionCommand="sh -c 'cd \"$currentDirectory\" ; . \"$parentDirectory/lib/corgi/openbox/menus/corgi-openbox-menus-displays.shlib\" ; setDisplayResolution \"$name\" \"$resolution\" \"$primaryName\"'"
        supportedResMenu="$supportedResMenu`corgiObMenuItem "label:$resolutionLabel" "action:Execute" "command:$setResolutionCommand"`"

        supportedResolutions="`corgiFetchSubstringAfter "$supportedResolutions" $connectionDataDelimiter 'first'`"
        supportedResolutionLabels="`corgiFetchSubstringAfter "$supportedResolutionLabels" $connectionDataDelimiter 'first'`"

      done

      menuId="`corgiMakeIdString "corgi-menus-displays-connections-$name-resolutions-"`"
      supportedResMenu="`corgiObMenu "id:$menuId" "label:Set Resolution" "content:$supportedResMenu"`"

    fi
    
    scaleMenu="`buildConnectionScaleMenu \"$name\"`"

    if connectionSupportsPanning "$name"
    then

      setPanningCommand="sh -c 'cd \"$currentDirectory\" ; . \"$parentDirectory/lib/corgi/openbox/menus/corgi-openbox-menus-displays.shlib\" ; promptUserForDisplayPanning \"$name\" \"$primaryName\"'"
      setPanningItem="`corgiObMenuItem "label:Set Panning" "action:Execute" "command:$setPanningCommand"`"

      if [ $hasPanning = true ]
      then
        clearPanningCommand="sh -c 'cd \"$currentDirectory\" ; . \"$parentDirectory/lib/corgi/openbox/menus/corgi-openbox-menus-displays.shlib\" ; setDisplayPanning \"$name\" \"0x0\" \"$primaryName\"'"
        clearPanningItem="`corgiObMenuItem "label:Clear Panning" "action:Execute" "command:$clearPanningCommand"`"
      fi

    fi

    if [ $isPrimary = false ]
    then
      makePrimaryCommand="sh -c 'cd \"$currentDirectory\" ; . \"$parentDirectory/lib/corgi/openbox/menus/corgi-openbox-menus-displays.shlib\" ; makeDisplayPrimary \"$name\"'"
      makePrimaryItem="`corgiObMenuItem "label:Make Primary" "action:Execute" "command:$makePrimaryCommand"`"
    fi

    if corgiHasSubstring "$names" $connectionDataDelimiter && [ ! -z "`corgiFetchSubstringAfter "$names" ',' 'first'`" ]
    then
      menuId="`corgiMakeIdString "corgi-menus-displays-connections-$name-move-"`"
      moveMenuCommand="sh -c 'cd &quot;$currentDirectory&quot; ; . &quot;$parentDirectory/lib/corgi/openbox/menus/corgi-openbox-menus-displays.shlib&quot; ; buildConnectionMoveMenus &quot;$name&quot; &quot;$names&quot; &quot;$primaryName&quot;'"
      moveMenu="`corgiObMenu "id:$menuId" "label:Move" "execute:$moveMenuCommand"`"
    fi
    
    if [ ! -z "$brightnessInterface" ]
    then
      brightnessMenu="`buildConnectionBrightnessMenu \"$name\" \"$brightnessInterface\"`"
    fi

  fi
  
  echo "`corgiObPipeMenu "content:$detailsMenu$supportedResMenu$scaleMenu$setPanningItem$clearPanningItem$makePrimaryItem$moveMenu$brightnessMenu"`"
  exit $?

}


# Generates and echoes an Openbox pipe menu (as an XML-formatted string) consisting of data which describes the available GPU hardware.
buildDevicesMenu() {

  lspci | grep 'VGA' | {

    devicesMenu=''
    itemIcon="$parentDirectory/share/icons/corgi/openbox/menus/chardevice.png"

    while read -r line
    do

      if corgiHasSubstring "$line" 'controller:'
      then
        devicesItem="`corgiFetchSubstringAfter "$line" 'controller:'`"
        devicesItem="`corgiTrimWhiteSpace "$devicesItem"`"
        devicesItem="`corgiObMenuItem "icon:$itemIcon" "label:$devicesItem"`"
        devicesMenu="$devicesMenu$devicesItem"
      fi

    done

    lspci | grep '3D' | {

      while read -r line
      do

        if corgiHasSubstring "$line" 'controller:'
        then
          devicesItem="`corgiFetchSubstringAfter "$line" 'controller:'`"
          devicesItem="`corgiTrimWhiteSpace "$devicesItem"`"
          devicesItem="`corgiObMenuItem "icon:$itemIcon" "label:$devicesItem"`"
          devicesMenu="$devicesMenu$devicesItem"
        fi

      done

      echo "`corgiObPipeMenu "content:$devicesMenu"`"
      exit 0

    }

    exit $?

  }

  exit $?

}


# Appends an Openbox menu containing submenus and items which describe,
# as well as allow the manipulation of, an active display connection, to already-generated menus.
#
# $1 - string, required (may be empty), the menus currently generated
# $2 - string, required, the name of the display connection for which the menu is being generated
# $3 - string, required, the names of all display connections present
# $4 - string, required, the display resolutions available to the display connection
# $5 - string, required, details which describe the display connection
# $6 - string, required, the display resolutions available to the display connection, in "easy-reading" format
# $7 - string, optional, the name of the display connection designated as primary (if any) 
appendConnectionMenus() {

  menus="$1"
  name="$2"
  names="$3"
  supportedResolutions="$4" 
  detailLabels="$5" 
  supportedResolutionLabels="$6"
  brightnessInterface="$7"
  primaryName="$8"

  if corgiHasSubstring "$name" ' (primary)'
  then
    menuId="$primaryName"
  else
    menuId="$name"
  fi

  menuId="`corgiMakeIdString "corgi-menus-displays-connections-$menuId-"`"
  menuCommand="sh -c 'cd &quot;$currentDirectory&quot; ; . &quot;$parentDirectory/lib/corgi/openbox/menus/corgi-openbox-menus-displays.shlib&quot; ; buildConnectionMenu &quot;$name&quot; &quot;$names&quot; &quot;$supportedResolutions&quot; &quot;$detailLabels&quot; &quot;$supportedResolutionLabels&quot; &quot;$brightnessInterface&quot; &quot;$primaryName&quot;'"
  menuIcon="$parentDirectory/share/icons/corgi/openbox/menus/displays/display.png"

  echo "$menus`corgiObMenu "id:$menuId" "icon:$menuIcon" "label:$name" "execute:$menuCommand"`"
  exit $?

}


# Generates and echoes an Openbox pipe menu consisting of data which describes available GPU hardware, 
# X screens, display connections, and xrandr options available for the manipulation of available screens and connections.
buildDisplaysMenu() {
	
	if [ $hasXrandr = false ]
	then
  	echo "`corgiObMenuItem "label:displays menu requires xrandr..."`"
  	exit 1
	fi

  connectionNamesToPass="$1"
  primaryConnectionNameToPass="$2"
  dpiToPass=$3
  reversePrimeProviderToPass=$4
  reversePrimeSourceToPass=$5
  primePanningBoolToPass=$6
  callbackToPass="$7"

  xrandr --query | {

    connectionNames=''
    primaryConnectionName=''

    while read -r line
    do

      if ! corgiHasSubstring "$line" 'disconnected' && corgiHasSubstring "$line" 'connected'
      then

        connectionName="`corgiFetchSubstringBefore "$line" ' ' 'first'`"
        connectionNames="$connectionNames$connectionName$connectionDataDelimiter"

        if corgiHasSubstring "$line" 'primary'
        then
          primaryConnectionName="$connectionName"
        fi

      fi

    done

    xrandr --query | {

      displaysMenu=''
      screenMenus=''
      connectionMenus=''
      inactiveConnectionsMenu=''

      activeScreenRes=''
      connectionName=''
      connectionSupportedResolutions=''
      connectionDetailLabels=''
      connectionSupportedReolutionLabels=''
      connectionBrightnessInterface=''

      while read -r line
      do

        if corgiStartsWithSubstring "$line" 'Screen'
        then

          screenName="`corgiFetchSubstringBefore "$line" ':' 'first'`"
        
          activeScreenRes="`corgiFetchSubstringBetween "$line" 'current ' ',' 'inner'`"
          activeScreenRes="`corgiReplaceAllOccurrencesOfSubstring "$activeScreenRes" ' x ' 'x'`"

          minScreenRes="`corgiFetchSubstringBetween "$line" 'minimum ' ',' 'inner'`"
          minScreenRes="`corgiReplaceAllOccurrencesOfSubstring "$minScreenRes" ' x ' 'x'`"

          maxScreenRes="`corgiFetchSubstringBetween "$line" 'maximum ' ',' 'inner'`"
          maxScreenRes="`corgiReplaceAllOccurrencesOfSubstring "$maxScreenRes" ' x ' 'x'`"       

          screenMenuItems="`corgiObMenuItem "label:Active Resolution: $activeScreenRes"`"
          screenMenuItems="$screenMenuItems`corgiObMenuItem "label:Minimum Resolution: $minScreenRes"`"
          screenMenuItems="$screenMenuItems`corgiObMenuItem "label:Maximum Resolution: $maxScreenRes"`"
  
          screenNameId="`corgiReplaceAllOccurrencesOfSubstring "$screenName" ' ' '-'`"

          setScreenDpiCommand="sh -c 'cd \"$currentDirectory\" ; . \"$parentDirectory/lib/corgi/openbox/menus/corgi-openbox-menus-displays.shlib\" ; setScreenDpi \"$screenName\" 80'"
          screenDpiItems="`corgiObMenuItem "label:80" "action:Execute" "command:$setScreenDpiCommand"`"   

          setScreenDpiCommand="sh -c 'cd \"$currentDirectory\" ; . \"$parentDirectory/lib/corgi/openbox/menus/corgi-openbox-menus-displays.shlib\" ; setScreenDpi \"$screenName\" 90'"
          screenDpiItems="$screenDpiItems`corgiObMenuItem "label:90" "action:Execute" "command:$setScreenDpiCommand"`"   

          setScreenDpiCommand="sh -c 'cd \"$currentDirectory\" ; . \"$parentDirectory/lib/corgi/openbox/menus/corgi-openbox-menus-displays.shlib\" ; setScreenDpi \"$screenName\" 100'"
          screenDpiItems="$screenDpiItems`corgiObMenuItem "label:100" "action:Execute" "command:$setScreenDpiCommand"`"

          setScreenDpiCommand="sh -c 'cd \"$currentDirectory\" ; . \"$parentDirectory/lib/corgi/openbox/menus/corgi-openbox-menus-displays.shlib\" ; setScreenDpi \"$screenName\" 110'"
          screenDpiItems="$screenDpiItems`corgiObMenuItem "label:110" "action:Execute" "command:$setScreenDpiCommand"`"

          setScreenDpiCommand="sh -c 'cd \"$currentDirectory\" ; . \"$parentDirectory/lib/corgi/openbox/menus/corgi-openbox-menus-displays.shlib\" ; setScreenDpi \"$screenName\" 120'"
          screenDpiItems="$screenDpiItems`corgiObMenuItem "label:120" "action:Execute" "command:$setScreenDpiCommand"`"

          setScreenDpiCommand="sh -c 'cd \"$currentDirectory\" ; . \"$parentDirectory/lib/corgi/openbox/menus/corgi-openbox-menus-displays.shlib\" ; setScreenDpi \"$screenName\" 130'"
          screenDpiItems="$screenDpiItems`corgiObMenuItem "label:130" "action:Execute" "command:$setScreenDpiCommand"`"

          setScreenDpiCommand="sh -c 'cd \"$currentDirectory\" ; . \"$parentDirectory/lib/corgi/openbox/menus/corgi-openbox-menus-displays.shlib\" ; setScreenDpi \"$screenName\" 140'"
          screenDpiItems="$screenDpiItems`corgiObMenuItem "label:140" "action:Execute" "command:$setScreenDpiCommand"`"

          setScreenDpiCommand="sh -c 'cd \"$currentDirectory\" ; . \"$parentDirectory/lib/corgi/openbox/menus/corgi-openbox-menus-displays.shlib\" ; setScreenDpi \"$screenName\" 150'"
          screenDpiItems="$screenDpiItems`corgiObMenuItem "label:150" "action:Execute" "command:$setScreenDpiCommand"`"

          setScreenDpiCommand="sh -c 'cd \"$currentDirectory\" ; . \"$parentDirectory/lib/corgi/openbox/menus/corgi-openbox-menus-displays.shlib\" ; setScreenDpi \"$screenName\" 160'"
          screenDpiItems="$screenDpiItems`corgiObMenuItem "label:160" "action:Execute" "command:$setScreenDpiCommand"`"

          setScreenDpiCommand="sh -c 'cd \"$currentDirectory\" ; . \"$parentDirectory/lib/corgi/openbox/menus/corgi-openbox-menus-displays.shlib\" ; promptUserForScreenDpi \"$screenName\"'"
          screenDpiItems="$screenDpiItems`corgiObMenuItem "label:Arbitrary" "action:Execute" "command:$setScreenDpiCommand"`"

          menuId="`corgiMakeIdString "corgi-menus-displays-screens-$screenNameId-dpi-"`"
          screenDpiMenu="`corgiObMenu "id:$menuId" "label:Set DPI" "content:$screenDpiItems"`"

          menuId="`corgiMakeIdString "corgi-menus-displays-screens-$screenNameId-"`"
          menuIcon="$parentDirectory/share/icons/corgi/openbox/menus/displays/display.png"
          screenMenus="`corgiObMenu "id:$menuId" "icon:$menuIcon" "label:$screenName" "content:$screenMenuItems$screenDpiMenu"`"

        elif corgiHasSubstring "$line" 'disconnected'
        then

          if [ ! -z "$connectionName" ]
          then
            connectionMenus="`appendConnectionMenus "$connectionMenus" "$connectionName" "$connectionNames" "$connectionSupportedResolutions" "$connectionDetailLabels" "$connectionSupportedResolutionLabels" "$connectionBrightnessInterface" "$primaryConnectionName"`"
            connectionName=''
          fi

          inactiveConnectionName="`corgiFetchSubstringBefore "$line" ' ' 'first'`"
          inactiveConnectionsMenu="$inactiveConnectionsMenu`corgiObMenuItem "label:$inactiveConnectionName"`"

        elif corgiHasSubstring "$line" ' connected'
        then

          if [ ! -z "$connectionName" ]
          then
            connectionMenus="`appendConnectionMenus "$connectionMenus" "$connectionName" "$connectionNames" "$connectionSupportedResolutions" "$connectionDetailLabels" "$connectionSupportedResolutionLabels" "$connectionBrightnessInterface" "$primaryConnectionName"`"
            connectionName=''
          fi        

          connectionName="`corgiFetchSubstringBefore "$line" ' ' 'first'`"
          
          if corgiHasSubstring "$connectionNamesToPass" "$connectionName" && corgiHasSubstring "$connectionNamesToPass" "("
          then
          
            ## CHECK the client-provided connection names for brightness interfaces.
            ## IF a brightness interface for a connection name exists, collect it, to be used in the brightness submenu,
            ## then remove it from the client-provided connection names, before passing them on as an arg for the detect method...
          
            connectionNamesToPassBeforeConnectionName="`corgiFetchSubstringBefore "$connectionNamesToPass" "$connectionName"`"
            connectionNamesToPassAfterConnectionName="`corgiFetchSubstringAfter "$connectionNamesToPass" "$connectionName"`"
            connectionNameCheckedForBrightnessInterface="$connectionNamesToPassAfterConnectionName"
            
            if corgiHasSubstring "$connectionNameCheckedForBrightnessInterface" "$connectionDataDelimiter"
            then
              connectionNameCheckedForBrightnessInterface="`corgiFetchSubstringBefore "$connectionNameCheckedForBrightnessInterface" "$connectionDataDelimiter"`"
            fi
            
            if corgiHasSubstring "$connectionNameCheckedForBrightnessInterface" '(' && corgiHasSubstring "$connectionNameCheckedForBrightnessInterface" ')'
            then
              connectionBrightnessInterface="`corgiFetchSubstringBetween "$connectionNameCheckedForBrightnessInterface" '(' ')'`"
              connectionNamesToPass="$connectionNamesToPassBeforeConnectionName$connectionName$connectionNamesToPassAfterConnectionName"
            fi
          
          fi

          line="`corgiFetchSubstringAfter "$line" 'connected'`"
          line="`corgiTrimWhiteSpace "$line"`"

          if corgiHasSubstring "$line" 'primary'
          then

            connectionName="$connectionName (primary)"  

            line="`corgiFetchSubstringAfter "$line" 'primary'`"
            line="`corgiTrimWhiteSpace "$line"`"

          fi

          activeConnectionRes="`corgiFetchSubstringBefore "$line" ' ' 'first'`"
          connectionPosition="`corgiFetchSubstringAfter "$activeConnectionRes" '+' 'first'`"
          activeConnectionRes="`corgiFetchSubstringBefore "$activeConnectionRes" '+' 'first'`"

          line="`corgiFetchSubstringAfter "$line" "$activeConnectionRes"`"
          line="`corgiTrimWhiteSpace "$line"`"

          panning=0
          tracking=0
          border=0

          if connectionSupportsPanning "$connectionName"
          then

            if corgiHasSubstring "$line" 'panning'
            then
              panning="`corgiFetchSubstringAfter "$line" 'panning '`"
              panning="`corgiFetchSubstringBefore "$panning" ' ' 'first'`"
            fi

            if corgiHasSubstring "$line" 'tracking'
            then
              tracking="`corgiFetchSubstringAfter "$line" 'tracking '`"
              tracking="`corgiFetchSubstringBefore "$tracking" ' ' 'first'`"
            fi

            if corgiHasSubstring "$line" 'border'
            then
              border="`corgiFetchSubstringAfter "$line" 'border '`"
              border="`corgiFetchSubstringBefore "$border" ' ' 'first'`"
            fi

          else
            panning='not supported'
            tracking='not supported'
            border='not supported'
          fi

          connectionDetailLabels="Panning: $panning$connectionDataDelimiter"
          connectionDetailLabels="$connectionDetailLabels"'Tracking: '"$tracking$connectionDataDelimiter"
          connectionDetailLabels="$connectionDetailLabels"'Border: '"$border$connectionDataDelimiter"
          connectionDetailLabels="$connectionDetailLabels"'Offset X: '"`corgiFetchSubstringBefore "$connectionPosition" '+'`$connectionDataDelimiter"
          connectionDetailLabels="$connectionDetailLabels"'Offset Y: '"`corgiFetchSubstringAfter "$connectionPosition" '+'`$connectionDataDelimiter"
  
          connectionSupportedResolutions=''
          connectionSupportedResolutionLabels=''

        else

          connectionSupportedRes="`corgiTrimWhiteSpace "$line"`"
          connectionSupportedRes="`corgiFetchSubstringBefore "$line" ' ' 'first'`"

          line="`corgiFetchSubstringAfter "$line" "$connectionSupportedRes"`"
          line="`corgiTrimWhiteSpace "$line"`"

          hz="`corgiFetchSubstringBefore "$line" '.' 'first'`Hz"
          connectionSupportedResLabel="$connectionSupportedRes @ $hz"

          line="`corgiFetchSubstringAfter "$line" "$hz" 'first'`"
          line="`corgiTrimWhiteSpace "$line"`"

          if corgiHasSubstring "$line" '*' && corgiHasSubstring "$line" '+'
          then
            connectionDetailLabels="Active Resolution: $connectionSupportedResLabel (preferred)$connectionDataDelimiter$connectionDetailLabels"
            connectionSupportedResLabel="$connectionSupportedResLabel (active) (preferred)"
          elif corgiHasSubstring "$line" '*'
          then
            connectionDetailLabels="Active Resolution: $connectionSupportedResLabel$connectionDataDelimiter$connectionDetailLabels"
            connectionSupportedResLabel="$connectionSupportedResLabel (active)"
          elif corgiHasSubstring "$line" '+'
          then
            connectionSupportedResLabel="$connectionSupportedResLabel (preferred)"
          fi

          connectionSupportedResolutions="$connectionSupportedResolutions$connectionSupportedRes$connectionDataDelimiter"
          connectionSupportedResolutionLabels="$connectionSupportedResolutionLabels$connectionSupportedResLabel$connectionDataDelimiter"

        fi

      done

      if [ ! -z "$connectionName" ]
      then
        connectionMenus="`appendConnectionMenus "$connectionMenus" "$connectionName" "$connectionNames" "$connectionSupportedResolutions" "$connectionDetailLabels" "$connectionSupportedResolutionLabels" "$connectionBrightnessInterface" "$primaryConnectionName"`"
      fi  

      menuId="`corgiMakeIdString "corgi-menus-displays-screens-"`"
      screenMenus="`corgiObMenu "id:$menuId" "label:Screens" "content:$screenMenus"`"

      menuId="`corgiMakeIdString "corgi-menus-displays-devices-"`"
      devicesMenuCommand="sh -c 'cd &quot;$currentDirectory&quot; ; . &quot;$parentDirectory/lib/corgi/openbox/menus/corgi-openbox-menus-displays.shlib&quot; ; buildDevicesMenu'"
      devicesMenu="`corgiObMenu "id:$menuId" "label:Devices" "execute:$devicesMenuCommand"`"

      if [ ! -z "$inactiveConnectionsMenu" ]
      then
        menuId="`corgiMakeIdString "corgi-menus-displays-connections-inactive-"`"
        inactiveConnectionsMenu="`corgiObMenu "id:$menuId" "label:Inactive" "content:$inactiveConnectionsMenu"`"
      fi

      menuId="`corgiMakeIdString "corgi-menus-displays-connections-"`"
      connectionMenus="`corgiObMenu "id:$menuId" "label:Connections" "content:$connectionMenus$inactiveConnectionsMenu"`"

      detectConnectionsCommand="sh -c 'cd \"$currentDirectory\" ; . \"$parentDirectory/lib/corgi/corgi-displays-management.shlib\" ; setDisplays \"$connectionNamesToPass\" \"$primaryConnectionNameToPass\" $dpiToPass $reversePrimeProviderToPass $reversePrimeSourceToPass $primePanningBoolToPass \"$callbackToPass\"'"
      detectConnectionsItem="`corgiObMenuItem "label:Detect Connections" "action:Execute" "command:$detectConnectionsCommand"`"

      echo "$screenMenus$devicesMenu$connectionMenus$detectConnectionsItem"
      exit 0  

    }

  }

  exit $?

}